-- these tests use all the databases

-- check ~ is found, bug #280
~ +keyword -n1
keyword ~

-- check keywords are including in default
~ -n1
keyword ~

-- check that keyword links work, bug #309
! --link +keyword -n1
keyword ! -- http://wiki.haskell.org/Keywords#.21

-- check you find forall, bug #235
forall -n10
keyword forall

-- check you find MonadWriter, bug #249
MonadWriter +mtl -n1
class (Monoid w, Monad m) => MonadWriter w m

module -n10
keyword module

Prelude -n1
Prelude

even +base -n1
even

tan +base -n1
tan

+base log -n1
log

seq +base -n1
seq

-- test that the base type String=[Char] alias is known
"[Char] -> a -> a" -n1
@now trace

-- test that packages are included
hlint -n1
package hlint

-- #146, preserve foralls
everywhere +syb -n1
everywhere :: (forall a. Data a => a -> a) -> (forall a. Data a => a -> a)

-- #320, make sure it finds system
system -n10
System.Cmd system :: String -> IO ExitCode

-- #187, LT not found
LT +base -n1
LT :: Ordering

-- #327, utf8 not found
utf8 -n1
utf8

-- check that URL's work
>>= --link -n1
http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:-62--62--61-

False --link -n1
http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:False

Ord --link -n1
http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Ord

String --link -n1
http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:String
